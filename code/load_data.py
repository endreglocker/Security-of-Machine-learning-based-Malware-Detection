import os
import torch
import numpy as np

def load_data():
    malware_root_path = os.path.join(os.getcwd(), "code", "dataset","malware")
    benign_root_path = os.path.join(os.getcwd(), "code", "dataset","benign")
    m_arm = os.path.join(malware_root_path, "arm")
    m_mips = os.path.join(malware_root_path, "mips")
    b_arm = os.path.join(benign_root_path, "arm")
    b_mips = os.path.join(benign_root_path, "mips")

    malwares = []
    for filename in os.listdir(m_arm):
        image_path = os.path.join(m_arm, filename)
        data = (image_path,1)
        malwares.append(data)

    for filename in os.listdir(m_mips):
        image_path = os.path.join(m_mips, filename)
        data = (image_path,1)
        malwares.append(data)

    benigns = []
    for filename in os.listdir(b_arm):
        image_path = os.path.join(b_arm, filename)
        data = (image_path,0)
        benigns.append(data)

    for filename in os.listdir(b_mips):
        image_path = os.path.join(b_mips, filename)
        data = (image_path,0)
        benigns.append(data)

    return malwares, benigns

def file_to_array(path, target_length=256*256):
    with open(path[0], 'rb') as f:
        binary_data = f.read()

    binary_data = [int(b) for b in binary_data]  # Convert bytes to integers

    # Resize the data to the target length
    binary_data = resize_array(binary_data, target_length)

    binary_data = [x / 255.0 for x in binary_data]
    # Convert the list to a tensor
    tensor_data = torch.tensor(binary_data, dtype=torch.float32)

    # Reshape the tensor to the expected input shape
    tensor_data = tensor_data.view(1, -1).float()

    ground_truth = torch.tensor([path[1]]).view(1,1).float()

    return tensor_data, ground_truth


def resize_array(binary_data, target_length):
    shrunk_array = []
    if len(binary_data) > target_length:
        factor = len(binary_data) / target_length

        for i in range(target_length):
            start_index = int(i * factor)
            end_index = int((i + 1) * factor)
            # Calculate the average for this segment
            segment_average = int(np.mean(binary_data[start_index:end_index]).round())
            shrunk_array.append(segment_average)
        return shrunk_array
    elif len(binary_data) < target_length:
        return binary_data + [0] * (target_length - len(binary_data))
    else:
        return binary_data
    
def revert_tensor_to_bytes():
    pass