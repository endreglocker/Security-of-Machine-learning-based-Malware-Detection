from torch import nn
import torch
from matplotlib import pyplot as plt
import numpy as np

def pgd_linf_rand(model, X, y, epsilon=1e-1, alpha=1e-2, num_iter=40, restarts=10, loss_fn=nn.CrossEntropyLoss(), percent = 0.1):
    max_loss = torch.zeros(y.shape[0]).to(y.device)
    max_delta = torch.zeros_like(X).to(X.device)
    
    for i in range(restarts):
        delta = torch.rand_like(X, requires_grad=True)

        #delta.data = delta.data * 2 * epsilon - epsilon
        start_index = int((1 - percent) * delta.data.numel())

        delta.data.view(-1)[:start_index] = 0
        
        delta.data.view(-1)[start_index:] = delta.data.view(-1)[start_index:] * 2 * epsilon - epsilon
        
        for t in range(num_iter):
            modified = model(X + delta)
            loss = loss_fn(modified, y)
            loss.backward()

            #delta.data.view(-1)[:start_index] = 0
            original = delta.data.view(-1)[start_index:]
            noise = alpha*delta.grad.detach().view(-1)[start_index:].sign()
            clamped = (original + noise).clamp(-epsilon,epsilon)
            delta.data.view(-1)[start_index:] = clamped
            
            delta.grad.zero_()
        
        loss_fn.reduction = 'none'
        all_loss = loss_fn(model(X+delta),y)
        max_delta[all_loss >= max_loss] = delta.detach()[all_loss >= max_loss]
        max_loss = torch.max(max_loss, all_loss)
    return max_delta

def plot_images(image, perturbated_image_leaf, masked_delta, original_label, perturbated_label):
    fig, ax = plt.subplots(1,5)

    pic_map = 'gray'
    heat_map = 'hot'
    ax[0].imshow(image.view(256,256).detach().numpy(), cmap=pic_map)
    ax[0].set_title(f"Original Image\n{original_label}")

    saliency, _ = torch.max(image.grad.data.abs(),dim=1)

    ax[1].imshow(saliency.view(256,256).detach().numpy(), cmap=heat_map)
    ax[1].set_title(f"Saliency\n{original_label}")

    ax[2].imshow(perturbated_image_leaf.view(256,256).detach().numpy(), cmap=pic_map)
    ax[2].set_title(f"Perturbated Image\n{perturbated_label}")

    saliency, _ = torch.max(perturbated_image_leaf.grad.data.abs(),dim=1)

    ax[3].imshow(saliency.view(256,256).detach().numpy(), cmap=heat_map)
    ax[3].set_title(f"Saliency\n{perturbated_label}")

    ax[4].imshow((masked_delta).view(256,256).detach().numpy(), cmap=pic_map)
    ax[4].set_title("Delta")

    plt.show()

def save_tensors(predicatum,masked_delta, image, perturbated_image):
    torch.set_printoptions(profile="full")
    np.set_printoptions(threshold=np.inf, formatter={'float_kind':'{:f}'.format})

    with open(f'raw/text/{predicatum}.delta.txt', 'w') as f:
        f.write(str(masked_delta.detach().numpy()))

    with open(f'raw/text/{predicatum}.data.txt', 'w') as f:
        f.write(str(image.detach().numpy()))
    
    with open(f'raw/text/{predicatum}.perturbated_data.txt', 'w') as f:
        f.write(str(perturbated_image.detach().numpy()))