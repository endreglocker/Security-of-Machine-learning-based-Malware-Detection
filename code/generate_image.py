import os
from PIL import Image
from math import sqrt

type = ["benign", "malware"]
arch = ["arm", "mips"]
dataset = os.path.join(os.getcwd(), "code","dataset")

arm_benign = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[0], arch[0])
mips_benign = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[0], arch[1])
arm_malware = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[1], arch[0])
mips_malware = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[1], arch[1])

arm_bening_images = os.path.join(dataset, type[0], arch[0])
mips_bening_images = os.path.join(dataset, type[0], arch[1])
arm_malware_images = os.path.join(dataset, type[1], arch[0])
mips_malware_images = os.path.join(dataset, type[1], arch[1])

raw_dataset = [arm_benign, mips_benign, arm_malware, mips_malware]
image_dataset = [arm_bening_images, mips_bening_images, arm_malware_images, mips_malware_images]

for directory in raw_dataset:
# Iterate over files in the directory
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        #print(file_path)

        # Read byte data from the file    
        byte_data = open(file_path, "rb").read()
        #print(byte_data)
        
        # Number of pixels of a square image: resolution * resolution
        # To get the resolution: sqrt(number of pixels) which are generated from the byte data
        resolution = int(sqrt(len(byte_data)))
        image = Image.frombytes("L", (resolution, resolution), byte_data)
        
        # Scale image to 256x256
        scaled_resolution = 256
        image = image.resize((scaled_resolution, scaled_resolution))
        
        #image.show()

        index = raw_dataset.index(directory)
        output_path = os.path.join(image_dataset[index], filename)
        output_path += ".png"  # Add file extension
        image.save(output_path)