import os
from PIL import Image
from math import sqrt
import numpy as np

sorted = False

type = ["benign", "malware"]
arch = ["arm", "mips"]
dataset = os.path.join(os.getcwd(), "code","dataset")

arm_benign = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[0], arch[0])
mips_benign = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[0], arch[1])
arm_malware = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[1], arch[0])
mips_malware = os.path.join(os.getcwd(), "raw", "ml-sample-pack-small", type[1], arch[1])

arm_bening_images = os.path.join(dataset, type[0], arch[0])
mips_bening_images = os.path.join(dataset, type[0], arch[1])
arm_malware_images = os.path.join(dataset, type[1], arch[0])
mips_malware_images = os.path.join(dataset, type[1], arch[1])

raw_dataset = [arm_benign, mips_benign, arm_malware, mips_malware]
image_dataset = [arm_bening_images, mips_bening_images, arm_malware_images, mips_malware_images]

target_resolution = 256 # 300 ?
target_size = target_resolution**2
counter = 1

def reshape_data(byte_data):
    byte_data = [b for b in byte_data]
    target_length = target_size
    if len(byte_data) < target_length:
        byte_data += [0] * (target_length - len(byte_data))

    factor = len(byte_data) / target_length

    shrunk_array = []
    for i in range(target_length):
        start_index = int(i * factor)
        end_index = int((i + 1) * factor)
        # Calculate the average for this segment
        segment_average = int(np.mean(byte_data[start_index:end_index]))
        shrunk_array.append(segment_average)

    #print(shrunk_array)
    my_bytes = [bytes([b]) for b in shrunk_array]
    
    transfromed = b''

    for b in my_bytes:
        transfromed += b

    print(f"{counter}\treturned!")
    return transfromed

for directory in raw_dataset:
# Iterate over files in the directory
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        #print(file_path)

        # Read byte data from the file    
        byte_data = open(file_path, "rb").read()
        #print(byte_data)
        if(len(byte_data) < target_size):
            byte_data += b'\x00' * (target_size - len(byte_data))
        
        if (len(byte_data) > target_size): # Convert bytes to integers
            byte_data = reshape_data(byte_data)  
            print(f"{counter}\tReshaped!")
            counter += 1

        resolution = int(sqrt(len(byte_data)))

        

        image = Image.frombytes("L", (resolution, resolution), byte_data)
        if image.width > target_resolution:
            print(f"Original image size: {image.size}")
            image = image.resize((target_resolution, target_resolution))
            #print(f"Resized image size: {image.size}")
            counter += 1

        
        #image.show()
        if(sorted == True):
            index = raw_dataset.index(directory)
            output_path = os.path.join(image_dataset[index], filename)
        else:
            output_path = os.path.join(os.path.join(os.getcwd(), "code","all_image"), filename)
            
        output_path += ".png"  # Add file extension
        image.save(output_path)
print(counter)
# Run createCSV.sh