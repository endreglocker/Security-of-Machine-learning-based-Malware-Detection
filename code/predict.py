import os
from PIL import Image
import torch
import torchvision.transforms as transforms  
from model.custom_models import LeNet5
import matplotlib.pyplot as plt

directory = os.path.join(os.getcwd(), "code", "model",'model.pth')

loading = torch.load(directory, map_location=torch.device('cpu'))

model = LeNet5()

model.load_state_dict(loading)
model.eval()

#image_path = os.path.join(os.getcwd(), "code", 'tmp.png')
image_path = os.path.join(os.getcwd(), "code", "dataset","malware","arm",'c0f8718553b13872b097c6f10c805b01c58ba93bb45314046cec73c6b004f9bc.png')
#image_path = os.path.join(os.getcwd(), "code", "dataset","malware","mips",'c0d3690c660dca76dd9992c7e15fa6c3e8a2a8723b9e74ad61b3df1e22f7ab21.png')
#image_path = os.path.join(os.getcwd(), "code", "dataset","benign","arm",'be826135630b076b3b52cc707ae3a324dc11bef2ca7ae8dbc137fa2b4e0e6ee0.png')
#image_path = os.path.join(os.getcwd(), "code", "dataset","benign","mips",'bdf09633f6dd93bd9c8b0d39edd19ac032522e5f6ad09f87fbef914d6854cd8e.png')
image = Image.open(image_path)

transform = transforms.ToTensor()

image = transform(image)
image = image.unsqueeze(0)
image.requires_grad_()

output = model(image)
output.backward()

prediction = 1 if output.item() > 0.5 else 0

dict = {0: 'Benign', 1: 'Malware'}
print(dict[prediction])

saliency, _ = torch.max(image.grad.data.abs(),dim=1)
plt.imshow(saliency[0], cmap=plt.cm.hot)
plt.title(dict[prediction])
plt.show()