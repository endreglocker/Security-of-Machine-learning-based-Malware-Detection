import os
from PIL import Image
import torch
import torchvision
import torchvision.transforms as transforms  
from torchvision.transforms import Grayscale

directory = os.path.join(os.getcwd(), "code", "model",'model.pth')
loading = torch.load(directory, map_location=torch.device('cpu'))

model = torchvision.models.googlenet(weights="DEFAULT")
model.fc = torch.nn.Linear(model.fc.in_features, 2)

model.load_state_dict(loading, strict=False)


image_path = os.path.join(os.getcwd(), "code", "model", '0a44e52c73989dc3dd7bf593225f0fe1042d980b3d095a659f653ac340991e63.png')
image = Image.open(image_path).convert('L')

# Convert the image to a PIL Image
image = image.convert('RGB')

# Apply the transformations


transformed = torchvision.transforms.Compose([
    Grayscale(num_output_channels=3),  # Convert grayscale image to RGB
    transforms.ToTensor(),
])
image_tensor = torch.unsqueeze(transformed(image), 0)
model.eval()
output = model(image_tensor)  # Pass the transformed image tensor to the model


class_labels = ['benign', 'malware']  # replace with your actual class labels
predicted_class_index = output.argmax()
print(predicted_class_index)
predicted_class_label = class_labels[predicted_class_index]
print(predicted_class_label)
